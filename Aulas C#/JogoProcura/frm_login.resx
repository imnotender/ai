<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAABMTEw0XGxtBGRkcbBkbHYoZGx2eGRscqBkbHacZGxyXGRsdeRgb
        G0kTExMNAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAABhgbHl0ZGh29GRsd2xkbHZ4ZGRxsGBsbSRoaGjEVHBwkFxcXIRcX
        HCwYGBxIGRsdeBkaHbUZGx6qFxsbQQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGBodXxkbHIQXGh1XGRsdjBkb
        HmYZGh2+FxodVxgbHXEZGR09AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAZHBxbFxoeTAAAAAcZGx53GRocmBkZGQoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////////////////////wAf//gAB//wf+H/4j/4/8eP/H+Pwfg/n/
        ABP5w/D5+QH/+fk4+Bn5IPAB+QBgAfCCYQGA4GEDhH/Ig8QfyEfkD8IH4MHDB+DAAA/IDgH/2J///8BP
        ///AD////A////////////////////////8=
</value>
  </data>
</root>